name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 3.0.1)"
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # Required for PyPI trusted publishing

jobs:
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Lint with ruff
        run: |
          uv run ruff check src tests

      - name: Type check with mypy
        run: |
          uv run mypy src

      - name: Run offline tests with coverage
        run: |
          uv run pytest -m offline \
            --cov=src/birre \
            --cov-report=term \
            --cov-fail-under=70

  build:
    name: Build Distribution
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Build package
        run: |
          uv build

      - name: Verify package contents
        run: |
          tar -tzf dist/*.tar.gz | head -20
          unzip -l dist/*.whl | head -30

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  github-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Extract version from tag
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" == "workflow_dispatch" ]; then
            VERSION="$INPUT_VERSION"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Extract relevant section from CHANGELOG.md
          CHANGELOG_SECTION=$(awk '/^## \['"${{ steps.version.outputs.version }}"'\]/,/^## \[/' CHANGELOG.md | sed '$d')

          # If no section found, create a simple one
          if [ -z "$CHANGELOG_SECTION" ]; then
            CHANGELOG_SECTION="Release ${{ steps.version.outputs.version }}"
          fi

          # Save to file for multiline output
          echo "$CHANGELOG_SECTION" > changelog.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: changelog.txt
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: false

  pypi-publish:
    name: Publish to PyPI
    needs: github-release
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/project/birre/

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true
